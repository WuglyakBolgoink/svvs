var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.614,1,1.614]],["body/controllers/AppController.html",[0,2.852,1,2.462,2,2.67,3,0.651,4,0.554,5,0.554,6,2.67,7,0.554,8,4.217,9,2.462,10,2.462,11,2.863,12,0.651,13,1.445,14,4.886,15,1.933,16,0.051,17,0.995,18,3.311,19,1.395,20,4.641,21,2.062,22,1.135,23,4.217,24,0.651,25,0.756,26,0.651,27,0.303,28,3.311,29,0.03,30,0.039,31,0.03]],["title/modules/AppModule.html",[32,1.079,33,1.614]],["body/modules/AppModule.html",[1,2.489,2,3.035,3,0.547,4,0.466,5,0.466,7,0.466,9,2.197,10,2.197,11,2.556,16,0.049,24,1.019,25,0.635,26,0.547,27,0.254,29,0.025,30,0.034,31,0.025,32,1.861,33,2.984,34,1.237,35,1.237,36,1.625,37,1.625,38,1.086,39,1.625,40,1.625,41,2.246,42,2.246,43,2.496,44,2.185,45,2.197,46,1.625,47,1.414,48,2.785,49,3.764,50,2.556,51,2.246,52,1.625,53,2.785,54,1.414,55,1.625,56,1.625,57,2.785,58,2.246,59,1.29,60,2.246,61,2.556,62,2.785,63,2.785,64,2.785,65,2.785,66,2.785,67,2.785,68,2.785,69,1.414,70,1.891,71,3.764,72,2.785,73,1.891,74,2.785]],["title/modules/AuthModule.html",[32,1.079,43,1.404]],["body/modules/AuthModule.html",[3,0.508,4,0.433,5,0.433,7,0.433,16,0.05,24,1.002,25,0.589,26,0.508,27,0.236,29,0.024,30,0.033,31,0.024,32,1.813,34,1.148,35,1.148,36,1.508,37,1.508,38,1.008,39,2.394,40,2.394,43,2.689,44,2.136,45,2.087,46,1.508,47,1.312,50,2.428,55,1.508,56,1.508,58,2.083,75,2.083,76,2.083,77,2.083,78,2.583,79,2.337,80,2.44,81,2.136,82,2.583,83,3.576,84,2.884,85,2.884,86,3.576,87,3.576,88,1.508,89,2.583,90,1.754,91,2.083,92,2.583,93,2.583,94,2.087,95,2.583,96,2.583,97,2.583,98,1.508,99,2.583,100,2.583,101,2.083,102,2.583,103,2.083,104,2.583]],["title/classes/AuthResolver.html",[27,0.253,94,1.614]],["body/classes/AuthResolver.html",[3,0.445,4,0.379,5,0.379,7,0.639,12,0.445,13,1.116,15,1.901,16,0.051,17,1.147,19,1.254,22,1.116,24,0.82,26,0.445,27,0.207,29,0.021,30,0.03,31,0.021,54,1.149,69,2.118,73,1.537,79,2.198,91,1.825,94,2.688,105,1.321,106,1.825,107,2.626,108,3.257,109,3.826,110,2.338,111,3.566,112,4.605,113,1.149,114,2.263,115,2.263,116,1.901,117,1.271,118,0.979,119,0.871,120,1.116,121,2.211,122,1.447,123,2.626,124,1.825,125,3.365,126,3.257,127,2.263,128,3.365,129,3.077,130,3.257,131,3.257,132,2.211,133,2.626,134,3.257,135,2.436,136,3.257,137,2.263,138,1.825,139,1.825,140,1.537,141,2.211,142,2.263,143,2.263,144,1.271,145,2.263,146,1.321,147,1.321,148,2.263]],["title/injectables/AuthService.html",[79,1.229,149,0.631]],["body/injectables/AuthService.html",[3,0.341,4,0.291,5,0.291,7,0.546,12,0.341,13,0.916,16,0.051,17,0.98,19,1.307,21,1.855,22,0.916,24,0.855,25,0.396,26,0.341,27,0.159,29,0.016,30,0.024,31,0.016,55,1.014,56,1.014,59,0.595,60,1.4,79,1.855,81,2.09,90,1.179,98,1.56,103,1.4,110,2.12,111,2.952,113,1.357,116,1.56,117,1.272,118,0.98,119,0.744,120,1.117,121,2.486,122,2.047,123,2.952,124,2.156,125,2.952,129,2.156,132,2.486,135,2.137,139,1.4,140,1.179,144,1.629,146,1.903,147,1.903,149,0.61,150,0.772,151,1.4,152,3.26,153,1.736,154,4.606,155,1.835,156,1.736,157,2.835,158,2.835,159,1.815,160,1.815,161,2.156,162,1.56,163,1.736,164,2.673,165,1.736,166,3.661,167,1.736,168,1.815,169,1.859,170,2.673,171,1.736,172,1.736,173,1.903,174,2.137,175,1.736,176,2.673,177,1.736,178,2.673,179,1.4,180,1.736,181,1.179,182,1.736,183,1.736,184,1.736,185,1.736,186,1.56,187,1.4,188,1.736,189,1.4,190,2.673,191,1.736,192,1.736,193,1.736,194,1.179]],["title/injectables/GqlAuthGuard.html",[149,0.631,195,1.614]],["body/injectables/GqlAuthGuard.html",[3,0.59,4,0.502,5,0.502,7,0.502,12,0.59,13,1.355,16,0.051,17,0.901,19,1.33,22,1.028,24,0.87,25,0.684,26,0.59,27,0.274,29,0.027,30,0.036,31,0.027,54,1.522,70,2.685,88,1.75,117,1.17,118,0.901,119,0.684,120,1.028,144,1.17,149,0.902,150,1.333,174,1.75,195,2.746,196,3.189,197,2.418,198,3.955,199,4.89,200,4.705,201,3.955,202,4.705,203,3.955,204,4.05,205,2.999,206,2.999,207,2.418,208,2.999,209,2.418,210,2.999,211,2.999]],["title/injectables/JwtStrategy.html",[80,1.404,149,0.631]],["body/injectables/JwtStrategy.html",[3,0.529,4,0.45,5,0.45,7,0.45,12,0.529,13,1.543,16,0.051,17,1.105,19,1.417,22,0.921,24,0.885,25,0.613,26,0.529,27,0.246,29,0.025,30,0.034,31,0.025,55,1.569,56,1.569,80,1.866,88,1.569,98,2.444,101,2.168,110,2.126,113,2.126,117,1.049,118,0.808,119,0.613,120,0.921,121,3.304,132,3.056,144,1.049,149,0.839,150,1.195,157,2.495,158,2.495,169,1.365,179,2.168,187,2.964,189,2.168,207,2.168,212,2.168,213,3.675,214,3.377,215,2.689,216,2.495,217,4.188,218,3.675,219,2.689,220,2.689,221,2.689,222,2.689,223,2.689,224,2.689,225,2.689,226,2.689,227,2.689,228,2.689,229,2.689,230,2.689,231,2.689,232,2.689,233,2.689,234,2.689,235,2.689,236,2.689]],["title/injectables/PasswordService.html",[81,1.229,149,0.631]],["body/injectables/PasswordService.html",[3,0.468,4,0.399,5,0.399,7,0.657,12,0.468,13,1.464,16,0.051,17,1.18,19,1.284,21,2.225,22,1.158,24,0.664,25,0.544,26,0.468,27,0.218,29,0.022,30,0.031,31,0.022,81,1.501,117,1.318,118,1.016,119,0.896,120,1.158,135,2.493,144,1.532,149,0.771,150,1.059,160,2.665,161,3.637,162,3.11,173,2.291,216,2.294,237,1.921,238,2.725,239,3.926,240,3.379,241,3.379,242,3.379,243,4.51,244,2.383,245,4.684,246,4.817,247,3.379,248,2.383,249,1.618,250,1.618,251,1.618,252,3.379,253,2.383,254,3.379,255,3.379,256,2.383,257,2.383,258,2.383,259,2.383,260,2.383]],["title/classes/UserEntity.html",[27,0.253,59,0.948]],["body/classes/UserEntity.html",[3,0.345,4,0.294,5,0.294,7,0.549,12,0.345,15,2.63,16,0.051,17,1.354,21,2.215,24,0.53,26,0.345,27,0.16,29,0.016,30,0.025,31,0.016,59,0.923,73,3.202,105,1.024,118,0.527,119,1.054,120,1.261,122,2.215,133,2.173,140,1.191,157,1.829,159,2.499,162,2.318,168,2.696,169,2.216,194,2.696,216,1.829,238,2.173,249,1.829,250,1.191,251,1.829,261,1.415,262,2.694,263,2.173,264,3.28,265,3.28,266,3.28,267,3.971,268,3.971,269,3.28,270,3.28,271,1.754,272,2.694,273,2.968,274,4.192,275,4.505,276,1.754,277,2.694,278,2.694,279,2.694,280,2.694,281,4.717,282,2.694,283,3.28,284,1.754,285,2.173,286,2.694,287,3.681,288,3.28,289,1.754,290,1.754,291,1.754,292,1.754,293,3.28,294,1.754,295,2.694,296,1.754,297,1.191,298,2.173,299,2.694,300,1.754,301,1.754]],["title/classes/UserResolver.html",[27,0.253,302,1.614]],["body/classes/UserResolver.html",[3,0.492,4,0.419,5,0.419,7,0.675,12,0.492,13,1.198,15,1.46,16,0.051,17,1.051,19,0.752,22,0.857,24,0.935,25,0.571,26,0.492,27,0.229,29,0.023,30,0.032,31,0.023,54,1.269,59,1.496,69,1.775,105,1.46,107,2.819,109,3.703,110,2.046,113,1.775,116,2.04,117,1.364,118,1.051,119,0.798,120,1.198,122,2.25,128,2.819,138,2.017,144,1.364,146,1.46,147,1.46,155,1.975,173,1.46,195,1.46,302,2.777,303,2.017,304,3.496,305,3.496,306,2.501,307,2.501,308,2.819,309,3.519,310,2.501,311,2.501,312,2.501,313,2.819,314,2.819,315,3.496,316,2.501,317,2.017,318,1.698,319,2.501,320,1.698,321,2.501,322,2.501,323,2.501,324,2.501,325,2.501,326,2.501,327,2.501]],["title/injectables/UserService.html",[149,0.631,155,1.079]],["body/injectables/UserService.html",[3,0.372,4,0.317,5,0.317,7,0.478,12,0.372,13,0.979,16,0.051,17,1.235,19,1.151,21,1.528,22,1.312,24,0.753,25,0.432,26,0.372,27,0.173,29,0.017,30,0.026,31,0.017,52,1.105,59,0.649,110,2.515,113,1.45,116,1.667,117,1.494,118,1.151,119,0.874,120,1.312,122,2.201,135,2.693,144,1.494,146,1.105,147,2.235,149,0.652,150,0.841,155,1.685,168,2.334,169,1.944,173,1.105,174,1.667,181,1.939,186,2.235,194,2.599,249,2.334,297,1.286,308,3.994,309,4.175,313,2.303,314,2.303,320,1.286,328,1.527,329,3.828,330,2.856,331,2.856,332,2.856,333,1.894,334,3.087,335,1.894,336,2.856,337,3.438,338,1.894,339,1.894,340,2.856,341,1.894,342,2.856,343,1.894,344,1.894,345,1.894,346,1.894,347,1.894,348,1.894,349,1.894,350,1.527,351,1.894,352,1.894,353,1.894,354,1.894]],["title/modules/UsersModule.html",[32,1.079,44,1.229]],["body/modules/UsersModule.html",[3,0.596,4,0.507,5,0.507,7,0.507,16,0.049,24,0.965,25,0.692,26,0.596,27,0.277,29,0.028,30,0.036,31,0.028,32,1.915,34,1.347,35,1.347,36,1.769,37,1.769,38,1.182,39,2.596,40,2.596,44,2.282,45,2.325,46,1.769,47,1.539,50,2.058,51,2.444,52,1.769,59,1.039,84,3.212,85,3.212,122,2.099,155,2.105,159,2.704,302,2.325,317,2.444,320,2.058,355,2.444,356,2.444,357,2.444,358,3.031,359,3.031,360,3.031]],["title/coverage.html",[361,3.021]],["body/coverage.html",[0,1.75,1,1.75,5,0.502,6,2.418,16,0.05,27,0.404,29,0.027,30,0.036,31,0.027,38,1.17,59,1.028,61,2.036,79,1.333,80,1.522,81,1.333,94,1.75,106,2.418,119,0.684,141,2.036,149,1.116,151,2.418,155,1.17,186,1.75,195,1.75,196,2.418,197,2.418,212,2.418,237,2.418,261,2.418,263,2.418,285,2.418,302,1.75,303,2.418,318,2.036,328,2.418,361,2.418,362,2.036,363,2.999,364,5.416,365,3.955,366,2.418,367,4.425,368,4.705,369,2.418,370,4.425,371,3.955,372,2.418,373,2.999,374,2.999,375,2.418,376,2.999,377,2.999]],["title/dependencies.html",[35,1.474,378,2.322]],["body/dependencies.html",[16,0.051,25,0.551,29,0.022,30,0.031,31,0.022,35,1.074,38,1.331,52,1.41,54,1.227,69,2.008,88,1.41,90,1.64,98,1.41,119,0.551,160,1.64,214,2.752,297,1.64,379,2.416,380,5.023,381,2.416,382,3.412,383,2.416,384,2.416,385,2.416,386,2.416,387,2.416,388,3.956,389,2.416,390,3.956,391,2.752,392,2.416,393,3.412,394,2.416,395,2.416,396,2.416,397,3.956,398,2.416,399,2.416,400,2.416,401,3.412,402,2.416,403,3.19,404,2.416,405,2.416,406,2.416,407,2.416,408,3.412,409,2.416,410,3.956,411,2.416,412,2.416,413,2.416,414,2.416,415,2.416,416,2.416,417,2.416,418,2.416,419,3.412,420,2.416,421,2.416,422,2.416,423,2.416,424,2.416,425,2.416,426,2.416,427,2.416,428,2.416,429,2.416,430,1.948,431,2.416,432,2.416,433,2.416,434,2.416,435,2.416,436,2.416,437,2.416,438,2.416,439,2.416,440,2.416,441,2.416,442,2.416,443,2.416,444,2.416,445,2.416,446,2.416,447,2.416,448,2.416,449,2.416]],["title/miscellaneous/functions.html",[450,1.356,451,2.675]],["body/miscellaneous/functions.html",[9,2.384,10,2.384,11,2.772,12,0.803,16,0.044,29,0.037,30,0.044,31,0.037,38,2.049,375,3.293,450,2.384,451,3.293,452,4.083]],["title/index.html",[12,0.457,453,1.873,454,1.873]],["body/index.html",[4,0.593,9,2.569,10,2.794,16,0.049,29,0.032,30,0.04,31,0.032,69,2.234,158,2.406,298,2.858,334,2.858,362,2.406,455,3.544,456,3.544,457,3.544,458,3.544,459,3.544,460,3.544,461,4.401,462,3.544,463,4.401,464,3.544,465,4.401,466,3.544,467,3.544,468,3.544,469,3.544,470,3.544,471,3.544,472,3.544,473,3.544,474,4.401,475,2.858,476,3.544]],["title/license.html",[453,1.873,454,1.873,477,1.873]],["body/license.html",[16,0.036,29,0.027,30,0.036,31,0.027,47,1.496,362,2.001,403,2.377,477,2.377,478,2.947,479,4.387,480,2.947,481,2.947,482,2.947,483,3.91,484,2.947,485,2.947,486,2.947,487,2.947,488,2.947,489,2.947,490,3.91,491,5.241,492,2.947,493,2.947,494,2.947,495,4.387,496,2.947,497,3.91,498,2.947,499,2.947,500,3.91,501,2.947,502,2.947,503,2.947,504,2.947,505,2.947,506,2.947,507,2.947,508,3.91,509,2.947,510,2.947,511,2.947,512,2.947,513,2.947,514,2.947,515,2.947,516,3.91,517,3.91,518,2.947,519,2.947,520,2.947,521,2.947,522,2.947,523,2.947,524,2.947,525,2.947,526,2.947,527,2.947,528,2.947,529,2.947,530,2.947,531,2.947,532,2.947,533,2.947,534,2.947,535,2.947,536,2.947,537,2.947,538,2.947,539,2.947,540,2.947,541,2.947,542,2.947,543,2.947,544,2.947,545,2.947,546,2.947,547,2.947]],["title/modules.html",[34,1.665]],["body/modules.html",[16,0.043,29,0.037,30,0.043,31,0.037,33,2.339,34,1.781,43,2.034,44,1.781,391,4.073,548,5.05,549,5.05,550,5.05]],["title/overview.html",[551,3.021]],["body/overview.html",[0,1.788,16,0.049,29,0.028,30,0.037,31,0.028,32,1.195,33,2.949,34,1.361,35,1.361,36,1.788,37,1.788,38,1.195,39,1.788,40,1.788,41,2.47,42,2.47,43,2.743,44,2.287,45,2.341,46,1.788,47,1.555,75,2.47,76,2.47,77,2.47,79,2.287,80,2.27,81,1.987,105,1.788,150,1.361,155,2.008,350,2.47,355,2.47,356,2.47,357,2.47,551,2.47,552,4.01,553,3.063]],["title/miscellaneous/variables.html",[450,1.356,554,2.675]],["body/miscellaneous/variables.html",[7,0.453,12,0.532,16,0.051,19,1.465,21,1.64,29,0.025,30,0.034,31,0.025,61,2.506,70,1.837,118,0.813,119,0.959,141,2.506,162,2.155,169,1.874,174,1.579,181,1.837,186,2.452,204,3.64,209,3.388,250,2.852,251,3.31,273,3.809,318,2.506,366,2.182,369,2.182,372,2.182,430,2.977,450,1.579,475,2.977,554,2.182,555,2.706,556,2.706,557,2.706,558,3.691,559,3.691,560,2.706,561,2.706,562,2.706,563,2.706,564,3.691,565,2.706,566,2.706,567,2.706,568,2.706,569,2.706,570,2.706,571,2.706,572,2.706,573,2.706,574,2.706,575,2.706,576,2.706,577,2.706,578,2.706,579,2.706,580,2.706,581,2.706,582,2.706,583,2.706]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0.1.13",{"_index":438,"title":{},"body":{"dependencies.html":{}}}],["0.10.2",{"_index":449,"title":{},"body":{"dependencies.html":{}}}],["0.2.31",{"_index":443,"title":{},"body":{"dependencies.html":{}}}],["0.3.2",{"_index":431,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":432,"title":{},"body":{"dependencies.html":{}}}],["1",{"_index":350,"title":{},"body":{"injectables/UserService.html":{},"overview.html":{}}}],["1.0.0",{"_index":447,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":368,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":252,"title":{},"body":{"injectables/PasswordService.html":{}}}],["100",{"_index":364,"title":{},"body":{"coverage.html":{}}}],["11.0.0",{"_index":388,"title":{},"body":{"dependencies.html":{}}}],["11.0.1",{"_index":410,"title":{},"body":{"dependencies.html":{}}}],["11.2.1",{"_index":416,"title":{},"body":{"dependencies.html":{}}}],["11.2.2",{"_index":382,"title":{},"body":{"dependencies.html":{}}}],["11.2.3",{"_index":380,"title":{},"body":{"dependencies.html":{}}}],["11.4.0",{"_index":418,"title":{},"body":{"dependencies.html":{}}}],["15.5.0",{"_index":427,"title":{},"body":{"dependencies.html":{}}}],["2.0.0",{"_index":442,"title":{},"body":{"dependencies.html":{}}}],["2.21.0",{"_index":422,"title":{},"body":{"dependencies.html":{}}}],["2.4.0",{"_index":421,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":365,"title":{},"body":{"coverage.html":{}}}],["2021",{"_index":481,"title":{},"body":{"license.html":{}}}],["3",{"_index":552,"title":{},"body":{"overview.html":{}}}],["3.3.12",{"_index":396,"title":{},"body":{"dependencies.html":{}}}],["3/3",{"_index":371,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":433,"title":{},"body":{"dependencies.html":{}}}],["4.15.2",{"_index":426,"title":{},"body":{"dependencies.html":{}}}],["4/4",{"_index":370,"title":{},"body":{"coverage.html":{}}}],["5",{"_index":553,"title":{},"body":{"overview.html":{}}}],["5.0.0",{"_index":424,"title":{},"body":{"dependencies.html":{}}}],["5.0.1",{"_index":423,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":287,"title":{},"body":{"classes/UserEntity.html":{}}}],["6.6.3",{"_index":440,"title":{},"body":{"dependencies.html":{}}}],["6/6",{"_index":374,"title":{},"body":{"coverage.html":{}}}],["7.0.0",{"_index":397,"title":{},"body":{"dependencies.html":{}}}],["7.0.4",{"_index":429,"title":{},"body":{"dependencies.html":{}}}],["7.1.5",{"_index":401,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":400,"title":{},"body":{"dependencies.html":{}}}],["7.9.10",{"_index":399,"title":{},"body":{"dependencies.html":{}}}],["8.5.1",{"_index":435,"title":{},"body":{"dependencies.html":{}}}],["9.0.2",{"_index":406,"title":{},"body":{"dependencies.html":{}}}],["9/9",{"_index":373,"title":{},"body":{"coverage.html":{}}}],["above",{"_index":515,"title":{},"body":{"license.html":{}}}],["access",{"_index":133,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserEntity.html":{}}}],["accesstoken",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":541,"title":{},"body":{"license.html":{}}}],["admin",{"_index":476,"title":{},"body":{"index.html":{}}}],["always",{"_index":575,"title":{},"body":{"miscellaneous/variables.html":{}}}],["and/or",{"_index":506,"title":{},"body":{"license.html":{}}}],["angular",{"_index":420,"title":{},"body":{"dependencies.html":{}}}],["angular/animations",{"_index":379,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":381,"title":{},"body":{"dependencies.html":{}}}],["angular/common",{"_index":383,"title":{},"body":{"dependencies.html":{}}}],["angular/compiler",{"_index":384,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":385,"title":{},"body":{"dependencies.html":{}}}],["angular/forms",{"_index":386,"title":{},"body":{"dependencies.html":{}}}],["angular/localize",{"_index":387,"title":{},"body":{"dependencies.html":{}}}],["angular/material",{"_index":389,"title":{},"body":{"dependencies.html":{}}}],["angular/platform",{"_index":390,"title":{},"body":{"dependencies.html":{}}}],["angular/router",{"_index":394,"title":{},"body":{"dependencies.html":{}}}],["api",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["apollo",{"_index":419,"title":{},"body":{"dependencies.html":{}}}],["apollo/client",{"_index":395,"title":{},"body":{"dependencies.html":{}}}],["app",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"miscellaneous/functions.html":{}}}],["app.controller",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["app.resolver",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["application",{"_index":461,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":33,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["apps/.../app.resolver.ts",{"_index":556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../auth.decorator.ts",{"_index":557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/.../main.ts",{"_index":452,"title":{},"body":{"miscellaneous/functions.html":{}}}],["apps/.../user.decorator.ts",{"_index":555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/app.controller.ts:13",{"_index":18,"title":{},"body":{"controllers/AppController.html":{}}}],["apps/backend/api/src/app/app.module.ts",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["apps/backend/api/src/app/app.resolver.ts",{"_index":366,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/auth/auth.module.ts",{"_index":82,"title":{},"body":{"modules/AuthModule.html":{}}}],["apps/backend/api/src/app/auth/decorators/auth.decorator.ts",{"_index":369,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts",{"_index":106,"title":{},"body":{"classes/AuthResolver.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:15",{"_index":115,"title":{},"body":{"classes/AuthResolver.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:29",{"_index":127,"title":{},"body":{"classes/AuthResolver.html":{}}}],["apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:39",{"_index":137,"title":{},"body":{"classes/AuthResolver.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts",{"_index":151,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts:18",{"_index":156,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts:38",{"_index":167,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/backend/api/src/app/auth/services/auth.service.ts:61",{"_index":163,"title":{},"body":{"injectables/AuthService.html":{}}}],["apps/backend/api/src/app/auth/services/jwt.strategy.ts",{"_index":212,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/services/jwt.strategy.ts:12",{"_index":215,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/backend/api/src/app/auth/services/jwt.strategy.ts:29",{"_index":219,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts",{"_index":237,"title":{},"body":{"injectables/PasswordService.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts:13",{"_index":253,"title":{},"body":{"injectables/PasswordService.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts:19",{"_index":248,"title":{},"body":{"injectables/PasswordService.html":{}}}],["apps/backend/api/src/app/auth/services/password.service.ts:28",{"_index":244,"title":{},"body":{"injectables/PasswordService.html":{}}}],["apps/backend/api/src/app/users/decorators/user.decorator.ts",{"_index":372,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts",{"_index":261,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:22",{"_index":284,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:28",{"_index":271,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:34",{"_index":294,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:43",{"_index":276,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:49",{"_index":292,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:55",{"_index":290,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:65",{"_index":296,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/entities/user.entity.ts:75",{"_index":289,"title":{},"body":{"classes/UserEntity.html":{}}}],["apps/backend/api/src/app/users/guards/gql.auth",{"_index":196,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/resolvers/user.resolver.ts",{"_index":303,"title":{},"body":{"classes/UserResolver.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/resolvers/user.resolver.ts:13",{"_index":307,"title":{},"body":{"classes/UserResolver.html":{}}}],["apps/backend/api/src/app/users/resolvers/user.resolver.ts:31",{"_index":312,"title":{},"body":{"classes/UserResolver.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts",{"_index":328,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:12",{"_index":335,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:27",{"_index":339,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:36",{"_index":341,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:45",{"_index":343,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/services/user.service.ts:56",{"_index":338,"title":{},"body":{"injectables/UserService.html":{}}}],["apps/backend/api/src/app/users/users.module.ts",{"_index":358,"title":{},"body":{"modules/UsersModule.html":{}}}],["apps/backend/api/src/main.ts",{"_index":375,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["args",{"_index":579,"title":{},"body":{"miscellaneous/variables.html":{}}}],["args.password",{"_index":582,"title":{},"body":{"miscellaneous/variables.html":{}}}],["args.username",{"_index":581,"title":{},"body":{"miscellaneous/variables.html":{}}}],["arising",{"_index":545,"title":{},"body":{"license.html":{}}}],["associated",{"_index":492,"title":{},"body":{"license.html":{}}}],["ast",{"_index":574,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ast.kind",{"_index":571,"title":{},"body":{"miscellaneous/variables.html":{}}}],["async",{"_index":110,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":83,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.graphql",{"_index":108,"title":{},"body":{"classes/AuthResolver.html":{}}}],["auth/auth.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["authentication",{"_index":86,"title":{},"body":{"modules/AuthModule.html":{}}}],["authguard",{"_index":206,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["authguard('jwt",{"_index":208,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["authmodule",{"_index":43,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["authors",{"_index":534,"title":{},"body":{"license.html":{}}}],["authresolver",{"_index":94,"title":{"classes/AuthResolver.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"coverage.html":{}}}],["authservice",{"_index":79,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autogenerate",{"_index":274,"title":{},"body":{"classes/UserEntity.html":{}}}],["await",{"_index":147,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["backend",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["backend/api",{"_index":28,"title":{},"body":{"controllers/AppController.html":{}}}],["base",{"_index":8,"title":{},"body":{"controllers/AppController.html":{}}}],["based",{"_index":467,"title":{},"body":{"index.html":{}}}],["bcrypt",{"_index":160,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"dependencies.html":{}}}],["beta2",{"_index":425,"title":{},"body":{"dependencies.html":{}}}],["bootstrap",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["bootstrap/ng",{"_index":405,"title":{},"body":{"dependencies.html":{}}}],["browse",{"_index":550,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":391,"title":{},"body":{"dependencies.html":{},"modules.html":{}}}],["c",{"_index":480,"title":{},"body":{"license.html":{}}}],["candidate",{"_index":314,"title":{},"body":{"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["channel",{"_index":459,"title":{},"body":{"index.html":{}}}],["charge",{"_index":487,"title":{},"body":{"license.html":{}}}],["claim",{"_index":537,"title":{},"body":{"license.html":{}}}],["class",{"_index":27,"title":{"classes/AuthResolver.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["classes",{"_index":105,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"overview.html":{}}}],["client",{"_index":475,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["cluster_appmodule",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":75,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":77,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":78,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":76,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":355,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":356,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":357,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["column",{"_index":275,"title":{},"body":{"classes/UserEntity.html":{}}}],["column({length",{"_index":286,"title":{},"body":{"classes/UserEntity.html":{}}}],["column({nullable",{"_index":291,"title":{},"body":{"classes/UserEntity.html":{}}}],["compare",{"_index":161,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PasswordService.html":{}}}],["compare(password",{"_index":260,"title":{},"body":{"injectables/PasswordService.html":{}}}],["comparehash",{"_index":240,"title":{},"body":{"injectables/PasswordService.html":{}}}],["comparehash(password",{"_index":242,"title":{},"body":{"injectables/PasswordService.html":{}}}],["conditions",{"_index":514,"title":{},"body":{"license.html":{}}}],["connection",{"_index":546,"title":{},"body":{"license.html":{}}}],["const",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":113,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["constructor(authservice",{"_index":114,"title":{},"body":{"classes/AuthResolver.html":{}}}],["constructor(jwtservice",{"_index":153,"title":{},"body":{"injectables/AuthService.html":{}}}],["constructor(private",{"_index":145,"title":{},"body":{"classes/AuthResolver.html":{}}}],["constructor(userrepository",{"_index":333,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":306,"title":{},"body":{"classes/UserResolver.html":{}}}],["contain",{"_index":84,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["context",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"injectables/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["contract",{"_index":542,"title":{},"body":{"license.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"coverage.html":{},"overview.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["copies",{"_index":508,"title":{},"body":{"license.html":{}}}],["copy",{"_index":490,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":479,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":361,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":329,"title":{},"body":{"injectables/UserService.html":{}}}],["created",{"_index":265,"title":{},"body":{"classes/UserEntity.html":{}}}],["createdatecolumn",{"_index":270,"title":{},"body":{"classes/UserEntity.html":{}}}],["createparamdecorator((data",{"_index":558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createuser",{"_index":330,"title":{},"body":{"injectables/UserService.html":{}}}],["createuser(user",{"_index":336,"title":{},"body":{"injectables/UserService.html":{}}}],["creation",{"_index":272,"title":{},"body":{"classes/UserEntity.html":{}}}],["ctx",{"_index":209,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["ctx.getargs()[1",{"_index":580,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ctx.getcontext().req",{"_index":211,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["currentuser",{"_index":318,"title":{},"body":{"classes/UserResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["custom",{"_index":563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["damages",{"_index":538,"title":{},"body":{"license.html":{}}}],["data",{"_index":132,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["database",{"_index":469,"title":{},"body":{"index.html":{}}}],["date",{"_index":273,"title":{},"body":{"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["date(ast.value",{"_index":573,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date(environment.jwt.expiresin).getdate",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["date(value",{"_index":569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["db",{"_index":262,"title":{},"body":{"classes/UserEntity.html":{}}}],["deal",{"_index":494,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":547,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{}}}],["decorators/auth.decorator",{"_index":142,"title":{},"body":{"classes/AuthResolver.html":{}}}],["decorators/user.decorator",{"_index":319,"title":{},"body":{"classes/UserResolver.html":{}}}],["default",{"_index":250,"title":{},"body":{"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":97,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["dependencies",{"_index":35,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":7,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"miscellaneous/variables.html":{}}}],["development",{"_index":462,"title":{},"body":{"index.html":{}}}],["disable",{"_index":229,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["distribute",{"_index":504,"title":{},"body":{"license.html":{}}}],["docker",{"_index":472,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":362,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["dynamic",{"_index":392,"title":{},"body":{"dependencies.html":{}}}],["e",{"_index":277,"title":{},"body":{"classes/UserEntity.html":{}}}],["email",{"_index":266,"title":{},"body":{"classes/UserEntity.html":{}}}],["engine",{"_index":415,"title":{},"body":{"dependencies.html":{}}}],["entities",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["entities/user.entity",{"_index":320,"title":{},"body":{"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["entity",{"_index":159,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserEntity.html":{},"modules/UsersModule.html":{}}}],["environment",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["environment.connection",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["environment.jwt.expiresin",{"_index":104,"title":{},"body":{"modules/AuthModule.html":{}}}],["environment.jwt.secret",{"_index":101,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["environments/environment",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["eslint",{"_index":228,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["eslint/no",{"_index":233,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["event",{"_index":533,"title":{},"body":{"license.html":{}}}],["execute",{"_index":107,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["executioncontext",{"_index":204,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["expiresin",{"_index":103,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["explicit",{"_index":234,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["export",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["exports",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":403,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extends",{"_index":207,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{}}}],["extract",{"_index":560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":220,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":225,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extracts",{"_index":583,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["files",{"_index":493,"title":{},"body":{"license.html":{}}}],["find",{"_index":308,"title":{},"body":{"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["findonebyid",{"_index":331,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":340,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyusername",{"_index":332,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyusername(username",{"_index":342,"title":{},"body":{"injectables/UserService.html":{}}}],["fitness",{"_index":528,"title":{},"body":{"license.html":{}}}],["following",{"_index":513,"title":{},"body":{"license.html":{}}}],["format",{"_index":576,"title":{},"body":{"miscellaneous/variables.html":{}}}],["free",{"_index":486,"title":{},"body":{"license.html":{}}}],["frontend",{"_index":474,"title":{},"body":{"index.html":{}}}],["function",{"_index":376,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":451,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":511,"title":{},"body":{"license.html":{}}}],["getdata",{"_index":14,"title":{},"body":{"controllers/AppController.html":{}}}],["gethash",{"_index":241,"title":{},"body":{"injectables/PasswordService.html":{}}}],["gethash(password",{"_index":247,"title":{},"body":{"injectables/PasswordService.html":{}}}],["getrequest",{"_index":202,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["getrequest(context",{"_index":203,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["getting",{"_index":453,"title":{"index.html":{},"license.html":{}},"body":{}}],["gqlauthguard",{"_index":195,"title":{"injectables/GqlAuthGuard.html":{}},"body":{"injectables/GqlAuthGuard.html":{},"classes/UserResolver.html":{},"coverage.html":{}}}],["gqlexecutioncontext",{"_index":199,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["gqlexecutioncontext.create(context",{"_index":210,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["granted",{"_index":485,"title":{},"body":{"license.html":{}}}],["graphql",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"classes/UserResolver.html":{},"dependencies.html":{},"index.html":{}}}],["graphqljson",{"_index":577,"title":{},"body":{"miscellaneous/variables.html":{}}}],["graphqlmodule",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forroot",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlscalartype",{"_index":562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["guard",{"_index":322,"title":{},"body":{"classes/UserResolver.html":{}}}],["guard.ts",{"_index":197,"title":{},"body":{"injectables/GqlAuthGuard.html":{},"coverage.html":{}}}],["guard.ts:16",{"_index":205,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["guards/gql.auth",{"_index":321,"title":{},"body":{"classes/UserResolver.html":{}}}],["hash",{"_index":246,"title":{},"body":{"injectables/PasswordService.html":{}}}],["hash(password",{"_index":258,"title":{},"body":{"injectables/PasswordService.html":{}}}],["hereby",{"_index":484,"title":{},"body":{"license.html":{}}}],["holders",{"_index":535,"title":{},"body":{"license.html":{}}}],["https://github.com/kelektiv/node.bcrypt.js#readme",{"_index":257,"title":{},"body":{"injectables/PasswordService.html":{}}}],["id",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":285,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["ignoreexpiration",{"_index":226,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implement",{"_index":128,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["implements",{"_index":157,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserEntity.html":{}}}],["implied",{"_index":524,"title":{},"body":{"license.html":{}}}],["import",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["imports",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["included",{"_index":518,"title":{},"body":{"license.html":{}}}],["including",{"_index":497,"title":{},"body":{"license.html":{}}}],["incoming",{"_index":164,"title":{},"body":{"injectables/AuthService.html":{}}}],["index",{"_index":12,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["infringement",{"_index":532,"title":{},"body":{"license.html":{}}}],["inject",{"_index":116,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":149,"title":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":150,"title":{},"body":{"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":344,"title":{},"body":{"injectables/UserService.html":{}}}],["injectrepository(userentity",{"_index":345,"title":{},"body":{"injectables/UserService.html":{}}}],["interaction",{"_index":158,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"index.html":{}}}],["interfaces",{"_index":134,"title":{},"body":{"classes/AuthResolver.html":{}}}],["isignauthpayload",{"_index":125,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["isignauthresponse",{"_index":139,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["isvalid",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["iuser",{"_index":264,"title":{},"body":{"classes/UserEntity.html":{}}}],["json",{"_index":430,"title":{},"body":{"dependencies.html":{},"miscellaneous/variables.html":{}}}],["jwt",{"_index":98,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":224,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":89,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":99,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":154,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":80,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kind",{"_index":523,"title":{},"body":{"license.html":{}}}],["kind.string",{"_index":572,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legend",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":299,"title":{},"body":{"classes/UserEntity.html":{}}}],["liability",{"_index":539,"title":{},"body":{"license.html":{}}}],["liable",{"_index":536,"title":{},"body":{"license.html":{}}}],["lib",{"_index":130,"title":{},"body":{"classes/AuthResolver.html":{}}}],["license",{"_index":477,"title":{"license.html":{}},"body":{"license.html":{}}}],["limitation",{"_index":498,"title":{},"body":{"license.html":{}}}],["limited",{"_index":525,"title":{},"body":{"license.html":{}}}],["line",{"_index":231,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["logic",{"_index":85,"title":{},"body":{"modules/AuthModule.html":{},"modules/UsersModule.html":{}}}],["login",{"_index":111,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["login(signinpayload",{"_index":124,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["logout",{"_index":112,"title":{},"body":{"classes/AuthResolver.html":{}}}],["mail",{"_index":278,"title":{},"body":{"classes/UserEntity.html":{}}}],["matching",{"_index":30,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["merchantability",{"_index":527,"title":{},"body":{"license.html":{}}}],["merge",{"_index":502,"title":{},"body":{"license.html":{}}}],["message",{"_index":23,"title":{},"body":{"controllers/AppController.html":{}}}],["metadata",{"_index":437,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":13,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":450,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":478,"title":{},"body":{"license.html":{}}}],["modify",{"_index":501,"title":{},"body":{"license.html":{}}}],["module",{"_index":32,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":34,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mono",{"_index":464,"title":{},"body":{"index.html":{}}}],["name",{"_index":118,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["necessary",{"_index":279,"title":{},"body":{"classes/UserEntity.html":{}}}],["nestjs",{"_index":465,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":25,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":398,"title":{},"body":{"dependencies.html":{}}}],["nestjs/graphql",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"injectables/GqlAuthGuard.html":{},"classes/UserResolver.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":90,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":88,"title":{},"body":{"modules/AuthModule.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":402,"title":{},"body":{"dependencies.html":{}}}],["nestjs/typeorm",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"dependencies.html":{}}}],["new",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["newuser",{"_index":352,"title":{},"body":{"injectables/UserService.html":{}}}],["next",{"_index":230,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["ng",{"_index":404,"title":{},"body":{"dependencies.html":{}}}],["ngrx/component",{"_index":407,"title":{},"body":{"dependencies.html":{}}}],["ngrx/effects",{"_index":409,"title":{},"body":{"dependencies.html":{}}}],["ngrx/entity",{"_index":411,"title":{},"body":{"dependencies.html":{}}}],["ngrx/router",{"_index":412,"title":{},"body":{"dependencies.html":{}}}],["ngrx/store",{"_index":413,"title":{},"body":{"dependencies.html":{}}}],["nguniversal/express",{"_index":414,"title":{},"body":{"dependencies.html":{}}}],["nickname",{"_index":267,"title":{},"body":{"classes/UserEntity.html":{}}}],["non",{"_index":531,"title":{},"body":{"license.html":{}}}],["notice",{"_index":516,"title":{},"body":{"license.html":{}}}],["nrwl/angular",{"_index":417,"title":{},"body":{"dependencies.html":{}}}],["null",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["nullable",{"_index":288,"title":{},"body":{"classes/UserEntity.html":{}}}],["number",{"_index":249,"title":{},"body":{"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["nx",{"_index":463,"title":{},"body":{"index.html":{}}}],["object",{"_index":561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["observable",{"_index":445,"title":{},"body":{"dependencies.html":{}}}],["obtaining",{"_index":489,"title":{},"body":{"license.html":{}}}],["open",{"_index":456,"title":{},"body":{"index.html":{}}}],["optional",{"_index":120,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["otherwise",{"_index":544,"title":{},"body":{"license.html":{}}}],["out",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":551,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":378,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":144,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["parameters",{"_index":117,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["parseliteral(ast",{"_index":570,"title":{},"body":{"miscellaneous/variables.html":{}}}],["parsevalue(value",{"_index":568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["partial",{"_index":337,"title":{},"body":{"injectables/UserService.html":{}}}],["particular",{"_index":529,"title":{},"body":{"license.html":{}}}],["pass",{"_index":166,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":214,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":87,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":96,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":222,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":223,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":162,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["password.service",{"_index":172,"title":{},"body":{"injectables/AuthService.html":{}}}],["passwordhash",{"_index":243,"title":{},"body":{"injectables/PasswordService.html":{}}}],["passwordservice",{"_index":81,"title":{"injectables/PasswordService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"coverage.html":{},"overview.html":{}}}],["payload",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.sub",{"_index":235,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["payload.username",{"_index":236,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["permission",{"_index":483,"title":{},"body":{"license.html":{}}}],["permit",{"_index":509,"title":{},"body":{"license.html":{}}}],["person",{"_index":488,"title":{},"body":{"license.html":{}}}],["persons",{"_index":510,"title":{},"body":{"license.html":{}}}],["pg",{"_index":434,"title":{},"body":{"dependencies.html":{}}}],["phone",{"_index":268,"title":{},"body":{"classes/UserEntity.html":{}}}],["plain",{"_index":245,"title":{},"body":{"injectables/PasswordService.html":{}}}],["playground",{"_index":72,"title":{},"body":{"modules/AppModule.html":{}}}],["portions",{"_index":520,"title":{},"body":{"license.html":{}}}],["postgesql",{"_index":470,"title":{},"body":{"index.html":{}}}],["postgresql",{"_index":473,"title":{},"body":{"index.html":{}}}],["present",{"_index":300,"title":{},"body":{"classes/UserEntity.html":{}}}],["primarygeneratedcolumn",{"_index":283,"title":{},"body":{"classes/UserEntity.html":{}}}],["private",{"_index":173,"title":{},"body":{"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["privatekey",{"_index":100,"title":{},"body":{"modules/AuthModule.html":{}}}],["project",{"_index":457,"title":{},"body":{"index.html":{}}}],["promise",{"_index":135,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":238,"title":{},"body":{"injectables/PasswordService.html":{},"classes/UserEntity.html":{}}}],["provide",{"_index":216,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{}}}],["provided",{"_index":521,"title":{},"body":{"license.html":{}}}],["providers",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["provides",{"_index":313,"title":{},"body":{"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["providing",{"_index":466,"title":{},"body":{"index.html":{}}}],["public",{"_index":301,"title":{},"body":{"classes/UserEntity.html":{}}}],["publish",{"_index":503,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":530,"title":{},"body":{"license.html":{}}}],["query",{"_index":109,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["query('login",{"_index":126,"title":{},"body":{"classes/AuthResolver.html":{}}}],["query('logout",{"_index":136,"title":{},"body":{"classes/AuthResolver.html":{}}}],["query('user",{"_index":324,"title":{},"body":{"classes/UserResolver.html":{}}}],["query('user')@useguards(gqlauthguard",{"_index":311,"title":{},"body":{"classes/UserResolver.html":{}}}],["readonly",{"_index":146,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["reflect",{"_index":436,"title":{},"body":{"dependencies.html":{}}}],["repository",{"_index":334,"title":{},"body":{"injectables/UserService.html":{},"index.html":{}}}],["req",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["request",{"_index":200,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["reset",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["resolve",{"_index":578,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resolver",{"_index":138,"title":{},"body":{"classes/AuthResolver.html":{},"classes/UserResolver.html":{}}}],["resolver('auth",{"_index":143,"title":{},"body":{"classes/AuthResolver.html":{}}}],["resolver('user",{"_index":323,"title":{},"body":{"classes/UserResolver.html":{}}}],["resolvermap",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["resolvers",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["resolvers/auth.resolver",{"_index":95,"title":{},"body":{"modules/AuthModule.html":{}}}],["resolvers/user.resolver",{"_index":359,"title":{},"body":{"modules/UsersModule.html":{}}}],["restriction",{"_index":496,"title":{},"body":{"license.html":{}}}],["result",{"_index":29,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":31,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["rights",{"_index":499,"title":{},"body":{"license.html":{}}}],["root",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["rounds",{"_index":255,"title":{},"body":{"injectables/PasswordService.html":{}}}],["rxjs",{"_index":439,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":254,"title":{},"body":{"injectables/PasswordService.html":{}}}],["saltrounds",{"_index":239,"title":{},"body":{"injectables/PasswordService.html":{}}}],["scalar",{"_index":564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["search",{"_index":315,"title":{},"body":{"classes/UserResolver.html":{}}}],["secretorkey",{"_index":227,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["see",{"_index":256,"title":{},"body":{"injectables/PasswordService.html":{}}}],["sell",{"_index":507,"title":{},"body":{"license.html":{}}}],["send",{"_index":567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["serialize(value",{"_index":565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["server",{"_index":393,"title":{},"body":{"dependencies.html":{}}}],["services/auth.service",{"_index":91,"title":{},"body":{"modules/AuthModule.html":{},"classes/AuthResolver.html":{}}}],["services/jwt.strategy",{"_index":93,"title":{},"body":{"modules/AuthModule.html":{}}}],["services/password.service",{"_index":92,"title":{},"body":{"modules/AuthModule.html":{}}}],["services/user.service",{"_index":317,"title":{},"body":{"classes/UserResolver.html":{},"modules/UsersModule.html":{}}}],["set",{"_index":280,"title":{},"body":{"classes/UserEntity.html":{}}}],["shall",{"_index":517,"title":{},"body":{"license.html":{}}}],["shared",{"_index":131,"title":{},"body":{"classes/AuthResolver.html":{}}}],["showcasing",{"_index":460,"title":{},"body":{"index.html":{}}}],["signauthresponse",{"_index":123,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["signin",{"_index":141,"title":{},"body":{"classes/AuthResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["signinpayload",{"_index":129,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{}}}],["signinpayload.password",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["signinpayload.username",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":102,"title":{},"body":{"modules/AuthModule.html":{}}}],["software",{"_index":491,"title":{},"body":{"license.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"modules/AuthModule.html":{},"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"index.html":{}}}],["standard",{"_index":213,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["started",{"_index":454,"title":{"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":363,"title":{},"body":{"coverage.html":{}}}],["store",{"_index":408,"title":{},"body":{"dependencies.html":{}}}],["strategy",{"_index":221,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":21,"title":{},"body":{"controllers/AppController.html":{},"injectables/AuthService.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":512,"title":{},"body":{"license.html":{}}}],["sublicense",{"_index":505,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":519,"title":{},"body":{"license.html":{}}}],["super",{"_index":217,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":548,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":549,"title":{},"body":{"modules.html":{}}}],["svvs",{"_index":455,"title":{},"body":{"index.html":{}}}],["svvs/shared/utils/interfaces",{"_index":140,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserEntity.html":{}}}],["table",{"_index":263,"title":{},"body":{"classes/UserEntity.html":{},"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":377,"title":{},"body":{"coverage.html":{}}}],["technologies",{"_index":471,"title":{},"body":{"index.html":{}}}],["technology",{"_index":468,"title":{},"body":{"index.html":{}}}],["this.authservice.login(signinpayload",{"_index":148,"title":{},"body":{"classes/AuthResolver.html":{}}}],["this.jwtservice.sign(payload",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.passwordservice.comparehash(pass",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.saltrounds",{"_index":259,"title":{},"body":{"injectables/PasswordService.html":{}}}],["this.userrepository.create(user",{"_index":353,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find",{"_index":346,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find({username",{"_index":348,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone(id",{"_index":347,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save(newuser",{"_index":354,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.findonebyid(user.id",{"_index":327,"title":{},"body":{"classes/UserResolver.html":{}}}],["this.userservice.findonebyusername(username",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.validateuser",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["tools",{"_index":428,"title":{},"body":{"dependencies.html":{}}}],["tort",{"_index":543,"title":{},"body":{"license.html":{}}}],["translate",{"_index":198,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["true",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthResolver.html":{},"classes/UserEntity.html":{}}}],["ts",{"_index":446,"title":{},"body":{"dependencies.html":{}}}],["tslib",{"_index":441,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":119,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":297,"title":{},"body":{"classes/UserEntity.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([userentity",{"_index":360,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forroot",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["typepaths",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["typescript",{"_index":232,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["unauthorizedexception",{"_index":170,"title":{},"body":{"injectables/AuthService.html":{}}}],["unique",{"_index":281,"title":{},"body":{"classes/UserEntity.html":{}}}],["unknown",{"_index":559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["update",{"_index":295,"title":{},"body":{"classes/UserEntity.html":{}}}],["updated",{"_index":269,"title":{},"body":{"classes/UserEntity.html":{}}}],["updatedatecolumn",{"_index":293,"title":{},"body":{"classes/UserEntity.html":{}}}],["use",{"_index":500,"title":{},"body":{"license.html":{}}}],["used",{"_index":298,"title":{},"body":{"classes/UserEntity.html":{},"index.html":{}}}],["useguard",{"_index":201,"title":{},"body":{"injectables/GqlAuthGuard.html":{}}}],["useguards",{"_index":316,"title":{},"body":{"classes/UserResolver.html":{}}}],["useguards(gqlauthguard",{"_index":325,"title":{},"body":{"classes/UserResolver.html":{}}}],["user",{"_index":122,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{}}}],["user.entity.ts",{"_index":282,"title":{},"body":{"classes/UserEntity.html":{}}}],["user.id",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.password",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.username",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["userentity",{"_index":59,"title":{"classes/UserEntity.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/UserEntity.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userid",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["username",{"_index":169,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":309,"title":{},"body":{"classes/UserResolver.html":{},"injectables/UserService.html":{}}}],["userresolver",{"_index":302,"title":{"classes/UserResolver.html":{}},"body":{"classes/UserResolver.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["users",{"_index":168,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserEntity.html":{},"injectables/UserService.html":{}}}],["users.graphql",{"_index":304,"title":{},"body":{"classes/UserResolver.html":{}}}],["users.length",{"_index":349,"title":{},"body":{"injectables/UserService.html":{}}}],["users/entities/user.entity",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["users/services/user.service",{"_index":171,"title":{},"body":{"injectables/AuthService.html":{}}}],["users/users.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["users[0",{"_index":351,"title":{},"body":{"injectables/UserService.html":{}}}],["userservice",{"_index":155,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"classes/UserResolver.html":{},"injectables/UserService.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["usersmodule",{"_index":44,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["validate",{"_index":121,"title":{},"body":{"classes/AuthResolver.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":218,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":152,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":165,"title":{},"body":{"injectables/AuthService.html":{}}}],["value",{"_index":251,"title":{},"body":{"injectables/PasswordService.html":{},"classes/UserEntity.html":{},"miscellaneous/variables.html":{}}}],["value.toisostring",{"_index":566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":367,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":554,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vladirr",{"_index":482,"title":{},"body":{"license.html":{}}}],["warranties",{"_index":526,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":522,"title":{},"body":{"license.html":{}}}],["welcome",{"_index":20,"title":{},"body":{"controllers/AppController.html":{}}}],["whether",{"_index":540,"title":{},"body":{"license.html":{}}}],["whoami",{"_index":305,"title":{},"body":{"classes/UserResolver.html":{}}}],["whoami(@currentuser",{"_index":326,"title":{},"body":{"classes/UserResolver.html":{}}}],["whoami(user",{"_index":310,"title":{},"body":{"classes/UserResolver.html":{}}}],["without",{"_index":495,"title":{},"body":{"license.html":{}}}],["youtube",{"_index":458,"title":{},"body":{"index.html":{}}}],["zen",{"_index":444,"title":{},"body":{"dependencies.html":{}}}],["zone.js",{"_index":448,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/app.controller.ts\n        \n\n\n            \n                Description\n            \n            \n                Base controller backend-api app\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getData\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getData\n                        \n                        \n                    \n                \n            \n            \n                \ngetData()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/app.controller.ts:13\n                \n            \n\n\n            \n                \n                    Return welcome string\n\n\n                    \n                        Returns :     { message: string; }\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {Controller, Get} from '@nestjs/common'\n\n\n/**\n * Base controller backend-api app\n */\n@Controller()\nexport class AppController {\n  /**\n   * Return welcome string\n   */\n  @Get()\n  getData() {\n    return {message: 'Welcome to backend/api!'}\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend/api/src/app/app.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Root module backend-api app\n\n        \n\n\n        \n            \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {Module} from '@nestjs/common'\nimport {TypeOrmModule} from '@nestjs/typeorm'\nimport {GraphQLModule} from '@nestjs/graphql'\n\nimport {environment} from '../environments/environment'\nimport {AuthModule} from './auth/auth.module'\nimport {UsersModule} from './users/users.module'\nimport {UserEntity} from './users/entities/user.entity'\nimport {resolverMap} from './app.resolver'\nimport {AppController} from './app.controller'\n\n/**\n * Root module backend-api app\n */\n@Module({\n  imports: [\n    TypeOrmModule.forRoot({\n      ...environment.connection,\n      entities: [UserEntity],\n    }),\n    GraphQLModule.forRoot({\n      typePaths: ['./**/*.graphql'],\n      context: ({req}) => ({req}),\n      playground: true,\n      resolvers: [resolverMap],\n    }),\n    UsersModule,\n    AuthModule,\n  ],\n  controllers: [AppController],\n})\nexport class AppModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_imports\n\n\n\n\nUsersModule\n\nUsersModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/auth.module.ts\n        \n\n\n        \n            Description\n        \n        \n            Auth module contain logic of authentication\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            PasswordService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {Module} from '@nestjs/common'\nimport {PassportModule} from '@nestjs/passport'\nimport {JwtModule} from '@nestjs/jwt'\n\nimport {environment} from '../../environments/environment'\n\nimport {UsersModule} from '../users/users.module'\nimport {AuthService} from './services/auth.service'\nimport {PasswordService} from './services/password.service'\nimport {JwtStrategy} from './services/jwt.strategy'\nimport {AuthResolver} from './resolvers/auth.resolver'\n\n/**\n * Auth module contain logic of authentication\n */\n@Module({\n  imports: [\n    UsersModule,\n    PassportModule.register({\n      defaultStrategy: 'jwt',\n    }),\n    JwtModule.register({\n      privateKey: environment.jwt.secret,\n      signOptions: {\n        expiresIn: environment.jwt.expiresIn,\n      },\n    }),\n  ],\n  providers: [AuthService, PasswordService, JwtStrategy, AuthResolver],\n  exports: [AuthService, PassportModule],\n})\nexport class AuthModule {\n}\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthResolver.html":{"url":"classes/AuthResolver.html","title":"class - AuthResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/resolvers/auth.resolver.ts\n        \n\n            \n                Description\n            \n            \n                AuthResolver execute auth.graphql query\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                logout\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authService: AuthService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:15\n                            \n                        \n\n                \n                    \n                            Inject into AuthResolver: AuthService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                validate user and return SignAuthResponse\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(signInPayload: ISignAuthPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('login')\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:29\n                \n            \n\n\n            \n                \n                    Implement GraphQL Query 'login'\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    signInPayload\n                                    \n                                            ISignAuthPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        from lib shared-data-access-interfaces\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            logout\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    logout()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('logout')\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/resolvers/auth.resolver.ts:39\n                \n            \n\n\n            \n                \n                    Implement GraphQL Query 'logout'\n\n\n                    \n                        Returns :     Promise\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Query, Resolver } from '@nestjs/graphql';\n\nimport type {\n  ISignAuthPayload,\n  ISignAuthResponse,\n} from '@svvs/shared/utils/interfaces';\n\nimport { SignIn } from '../decorators/auth.decorator';\nimport { AuthService } from '../services/auth.service';\n\n/**\n * AuthResolver execute auth.graphql query\n */\n@Resolver('Auth')\nexport class AuthResolver {\n  /**\n   * Inject into AuthResolver: AuthService\n   *\n   * @param authService validate user and return SignAuthResponse\n   */\n  constructor(private readonly authService: AuthService) {}\n\n  /**\n   * Implement GraphQL Query 'login'\n   *\n   * @param signInPayload from lib shared-data-access-interfaces\n   */\n  @Query('login')\n  async login(\n    @SignIn() signInPayload: ISignAuthPayload\n  ): Promise {\n    return await this.authService.login(signInPayload);\n  }\n\n  /**\n   * Implement GraphQL Query 'logout'\n   */\n  @Query('logout')\n  async logout(): Promise {\n    return true;\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/services/auth.service.ts\n        \n\n            \n                Description\n            \n            \n                This AuthService validate user and return SignAuthResponse\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, userService: UserService, passwordService: PasswordService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/auth/services/auth.service.ts:18\n                            \n                        \n\n                \n                    \n                            Inject into AuthService: JwtService, UserService, PasswordService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Implements interaction with JWT\n\n                                                        \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Implements interaction with the user entity\n\n                                                        \n                                                \n                                                \n                                                        passwordService\n                                                  \n                                                        \n                                                                        PasswordService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Implements interaction with bcrypt and compare password\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            login\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    login(signInPayload: ISignAuthPayload)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/auth.service.ts:61\n                \n            \n\n\n            \n                \n                    Return SignAuthResponse data\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    signInPayload\n                                    \n                                            ISignAuthPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Incoming login data\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/auth.service.ts:38\n                \n            \n\n\n            \n                \n                    Validate users\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\n\nimport {\n  ISignAuthPayload,\n  ISignAuthResponse,\n} from '@svvs/shared/utils/interfaces';\nimport { environment } from '../../../environments/environment';\n\nimport { UserService } from '../../users/services/user.service';\nimport { PasswordService } from './password.service';\nimport { UserEntity } from '../../users/entities/user.entity';\n\n/**\n * This AuthService validate user and return SignAuthResponse\n */\n@Injectable()\nexport class AuthService {\n  /**\n   * Inject into AuthService: JwtService, UserService, PasswordService\n   *\n   * @param jwtService Implements interaction with JWT\n   * @param userService Implements interaction with the user entity\n   * @param passwordService Implements interaction with bcrypt and compare password\n   */\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly userService: UserService,\n    private readonly passwordService: PasswordService\n  ) {}\n\n  /**\n   * Validate users\n   *\n   * @param username\n   * @param pass\n   */\n  async validateUser(\n    username: string,\n    pass: string\n  ): Promise> {\n    const user = await this.userService.findOneByUserName(username);\n\n    const isValid = user\n      ? await this.passwordService.compareHash(pass, user.password)\n      : false;\n\n    if (isValid) {\n      delete user.password;\n\n      return user;\n    }\n    return null;\n  }\n\n  /**\n   * Return SignAuthResponse data\n   *\n   * @param signInPayload Incoming login data\n   */\n  async login(signInPayload: ISignAuthPayload): Promise {\n    const user = await this.validateUser(\n      signInPayload.username,\n      signInPayload.password\n    );\n\n    if (!user) {\n      throw new UnauthorizedException();\n    }\n\n    const payload = { username: user.username, userId: user.id };\n\n    return {\n      accessToken: this.jwtService.sign(payload),\n      expiresIn: new Date(environment.jwt.expiresIn).getDate(),\n      id: user.id,\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/GqlAuthGuard.html":{"url":"injectables/GqlAuthGuard.html","title":"injectable - GqlAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  GqlAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/guards/gql.auth-guard.ts\n        \n\n            \n                Description\n            \n            \n                GqlAuthGuard translate GqlExecutionContext request => UseGuard\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getRequest\n                        \n                        \n                    \n                \n            \n            \n                \ngetRequest(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/guards/gql.auth-guard.ts:16\n                \n            \n\n\n            \n                \n                    getRequest return ExecutionContext as GqlExecutionContext request\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {ExecutionContext, Injectable} from '@nestjs/common'\nimport {GqlExecutionContext} from '@nestjs/graphql'\nimport {AuthGuard} from '@nestjs/passport'\n\n/**\n * GqlAuthGuard translate GqlExecutionContext request => UseGuard\n *\n */\n@Injectable()\nexport class GqlAuthGuard extends AuthGuard('jwt') {\n  /**\n   * getRequest return ExecutionContext as GqlExecutionContext request\n   *\n   * @param context\n   */\n  getRequest(context: ExecutionContext) {\n    const ctx = GqlExecutionContext.create(context)\n\n    return ctx.getContext().req\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/services/jwt.strategy.ts\n        \n\n            \n                Description\n            \n            \n                Implements interaction with standard passport-jwt methods\nand return validate data\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/auth/services/jwt.strategy.ts:12\n                            \n                        \n\n                \n                    \n                            provide super\n\n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/jwt.strategy.ts:29\n                \n            \n\n\n            \n                \n                    Return validate data\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from '@nestjs/common'\nimport {ExtractJwt, Strategy} from 'passport-jwt'\nimport {PassportStrategy} from '@nestjs/passport'\n\nimport {environment} from '../../../environments/environment'\n\n/**\n * Implements interaction with standard passport-jwt methods\n * and return validate data\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  /**\n   * provide super\n   */\n  constructor() {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: environment.jwt.secret,\n    })\n  }\n\n  /**\n   * Return validate data\n   * @param payload\n   */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async validate(payload: any) {\n    return {userId: payload.sub, username: payload.username}\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/PasswordService.html":{"url":"injectables/PasswordService.html","title":"injectable - PasswordService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  PasswordService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/auth/services/password.service.ts\n        \n\n            \n                Description\n            \n            \n                Provide methods bcrypt and compare password\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                saltRounds\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                compareHash\n                            \n                            \n                                getHash\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            compareHash\n                        \n                        \n                    \n                \n            \n            \n                \ncompareHash(password: string, passwordHash: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/password.service.ts:28\n                \n            \n\n\n            \n                \n                    Compare plain password with password hash\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Plain password\n\n                                    \n                                \n                                \n                                    passwordHash\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Password hash\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getHash\n                        \n                        \n                    \n                \n            \n            \n                \ngetHash(password: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/auth/services/password.service.ts:19\n                \n            \n\n\n            \n                \n                    Return hash\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Plain password\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            saltRounds\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Default value : 10\n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/auth/services/password.service.ts:13\n                            \n                        \n\n                \n                    \n                        Salt rounds\n\n                    \n                \n\n            \n        \n\n\n    \n\n\n    \n        import {Injectable} from '@nestjs/common'\nimport {compare, hash} from 'bcrypt'\n\n/**\n * Provide methods bcrypt and compare password\n */\n@Injectable()\nexport class PasswordService {\n  /**\n   * Salt rounds\n   * @see https://github.com/kelektiv/node.bcrypt.js#readme\n   */\n  private saltRounds = 10\n\n  /**\n   * Return hash\n   * @param password Plain password\n   */\n  getHash(password: string): Promise {\n    return hash(password, this.saltRounds)\n  }\n\n  /**\n   * Compare plain password with password hash\n   * @param password Plain password\n   * @param passwordHash Password hash\n   */\n  compareHash(password: string, passwordHash: string): Promise {\n    return compare(password, passwordHash)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserEntity.html":{"url":"classes/UserEntity.html","title":"class - UserEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/entities/user.entity.ts\n        \n\n            \n                Description\n            \n            \n                Entity users provide access to db table users\n\n            \n\n\n            \n                Implements\n            \n            \n                        IUser\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                created\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                nickname\n                            \n                            \n                                password\n                            \n                            \n                                phone\n                            \n                            \n                                updated\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            created\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:28\n                            \n                        \n\n                \n                    \n                        User creation date (autogenerate)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:43\n                            \n                        \n\n                \n                    \n                        User e-mail\nif necessary - set the value {unique: true} in user.entity.ts\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:22\n                            \n                        \n\n                \n                    \n                        User ID unique identifier (autogenerate)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            nickname\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 50, unique: true, nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:75\n                            \n                        \n\n                \n                    \n                        User nickname (optional)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:55\n                            \n                        \n\n                \n                    \n                        User password\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            phone\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:49\n                            \n                        \n\n                \n                    \n                        User phone (optional)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            updated\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:34\n                            \n                        \n\n                \n                    \n                        User update date (autogenerate)\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 50, unique: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in apps/backend/api/src/app/users/entities/user.entity.ts:65\n                            \n                        \n\n                \n                    \n                        Username {unique}\n\n                    \n                \n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Column,\n  CreateDateColumn,\n  Entity,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n} from 'typeorm';\n\nimport type { IUser } from '@svvs/shared/utils/interfaces';\n\n/**\n * Entity users provide access to db table users\n */\n@Entity({\n  name: 'users',\n})\nexport class UserEntity implements IUser {\n  /**\n   * User ID unique identifier (autogenerate)\n   */\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  /**\n   * User creation date (autogenerate)\n   */\n  @CreateDateColumn()\n  created: string;\n\n  /**\n   * User update date (autogenerate)\n   */\n  @UpdateDateColumn()\n  updated: string;\n\n  /**\n   * User e-mail\n   *\n   * if necessary - set the value {unique: true} in user.entity.ts\n   *\n   */\n  @Column()\n  email: string;\n\n  /**\n   * User phone (optional)\n   */\n  @Column({ nullable: true })\n  phone: string;\n\n  /**\n   * User password\n   */\n  @Column()\n  password: string;\n\n  /**\n   * Username {unique}\n   *\n   * @description\n   *\n   * Used as default username\n   */\n  @Column({ length: 50, unique: true })\n  username: string;\n\n  /**\n   * User nickname (optional)\n   *\n   * @description\n   *\n   * If present used as public username\n   */\n  @Column({ length: 50, unique: true, nullable: true })\n  nickname: string;\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserResolver.html":{"url":"classes/UserResolver.html","title":"class - UserResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/resolvers/user.resolver.ts\n        \n\n            \n                Description\n            \n            \n                UserResolver execute users.graphql query\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                whoAmI\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/users/resolvers/user.resolver.ts:13\n                            \n                        \n\n                \n                    \n                            Inject into UserResolver: UserService\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                find user from userRepository\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            whoAmI\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    whoAmI(user: UserEntity)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query('user')@UseGuards(GqlAuthGuard)\n                \n            \n\n            \n                \n                    Defined in apps/backend/api/src/app/users/resolvers/user.resolver.ts:31\n                \n            \n\n\n            \n                \n                    Implement GraphQL Query 'user'\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                UserEntity\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        provides the user as a candidate for search in userRepository\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {Query, Resolver} from '@nestjs/graphql'\nimport {UseGuards} from '@nestjs/common'\n\nimport {UserService} from '../services/user.service'\nimport {CurrentUser} from '../decorators/user.decorator'\nimport {UserEntity} from '../entities/user.entity'\nimport {GqlAuthGuard} from '../guards/gql.auth-guard'\n\n/**\n * UserResolver execute users.graphql query\n */\n@Resolver('User')\nexport class UserResolver {\n  /**\n   * Inject into UserResolver: UserService\n   *\n   * @param userService find user from userRepository\n   */\n  constructor(\n    private readonly userService: UserService,\n  ) {\n  }\n\n  /**\n   * Implement GraphQL Query 'user'\n   *\n   * @param user provides the user as a candidate for search in userRepository\n   */\n  @Query('user')\n  @UseGuards(GqlAuthGuard)\n  async whoAmI(@CurrentUser() user: UserEntity) {\n    return await this.userService.findOneById(user.id)\n  }\n\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            apps/backend/api/src/app/users/services/user.service.ts\n        \n\n            \n                Description\n            \n            \n                UserService find or create user from userRepository\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createUser\n                            \n                            \n                                    Async\n                                find\n                            \n                            \n                                    Async\n                                findOneById\n                            \n                            \n                                    Async\n                                findOneByUserName\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in apps/backend/api/src/app/users/services/user.service.ts:12\n                            \n                        \n\n                \n                    \n                            Inject into UserService: userRepository\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createUser(user: Partial)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:56\n                \n            \n\n\n            \n                \n                    Create new user into userRepository\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                Partial\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        provides candidate of new user into userRepository\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            find\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    find()\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:27\n                \n            \n\n\n            \n                \n                    Find all users from userRepository\n\n\n                    \n                        Returns :         Promise\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:36\n                \n            \n\n\n            \n                \n                    Find user by id from userRepository\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            findOneByUserName\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUserName(username: string)\n                \n            \n\n\n            \n                \n                    Defined in apps/backend/api/src/app/users/services/user.service.ts:45\n                \n            \n\n\n            \n                \n                    Find user by username from userRepository\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {Injectable} from '@nestjs/common'\nimport {InjectRepository} from '@nestjs/typeorm'\nimport {Repository} from 'typeorm'\n\nimport {UserEntity} from '../entities/user.entity'\n\n\n/**\n * UserService find or create user from userRepository\n */\n@Injectable()\nexport class UserService {\n  /**\n   * Inject into UserService: userRepository\n   *\n   * @param userRepository\n   */\n  constructor(\n    @InjectRepository(UserEntity)\n    private readonly userRepository: Repository,\n  ) {\n  }\n\n  /**\n   * Find all users from userRepository\n   */\n  async find(): Promise {\n    return await this.userRepository.find()\n  }\n\n  /**\n   * Find user by id from userRepository\n   *\n   * @param id\n   */\n  async findOneById(id: number): Promise {\n    return await (this.userRepository.findOne(id)) || null\n  }\n\n  /**\n   * Find user by username from userRepository\n   *\n   * @param username\n   */\n  async findOneByUserName(username: string): Promise {\n    const users = await this.userRepository.find({username})\n\n    return users.length === 1 ? users[0] : null\n  }\n\n  /**\n   * Create new user into userRepository\n   *\n   * @param user provides candidate of new user into userRepository\n   */\n  async createUser(user: Partial): Promise {\n    const newUser = await this.userRepository.create(user)\n\n    return this.userRepository.save(newUser)\n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUsersModule\n\nUsersModule\n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            apps/backend/api/src/app/users/users.module.ts\n        \n\n\n        \n            Description\n        \n        \n            User module contain logic user entity\n\n        \n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import {Module} from '@nestjs/common'\nimport {TypeOrmModule} from '@nestjs/typeorm'\n\nimport {UserService} from './services/user.service'\nimport {UserEntity} from './entities/user.entity'\nimport {UserResolver} from './resolvers/user.resolver'\n\n/**\n * User module contain logic user entity\n */\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserEntity]),\n  ],\n  providers: [UserService, UserResolver],\n  exports: [UserService],\n})\nexport class UsersModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                apps/backend/api/src/app/app.controller.ts\n            \n            controller\n            AppController\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/app.resolver.ts\n            \n            variable\n            resolverMap\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/decorators/auth.decorator.ts\n            \n            variable\n            SignIn\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/resolvers/auth.resolver.ts\n            \n            class\n            AuthResolver\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/services/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/services/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/auth/services/password.service.ts\n            \n            injectable\n            PasswordService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/decorators/user.decorator.ts\n            \n            variable\n            CurrentUser\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/entities/user.entity.ts\n            \n            class\n            UserEntity\n            \n                100 %\n                (9/9)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/guards/gql.auth-guard.ts\n            \n            injectable\n            GqlAuthGuard\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/resolvers/user.resolver.ts\n            \n            class\n            UserResolver\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                apps/backend/api/src/app/users/services/user.service.ts\n            \n            injectable\n            UserService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                apps/backend/api/src/main.ts\n            \n            function\n            bootstrap\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : 11.2.3\n        \n            @angular/cdk : ^11.2.2\n        \n            @angular/common : 11.2.3\n        \n            @angular/compiler : 11.2.3\n        \n            @angular/core : 11.2.3\n        \n            @angular/forms : 11.2.3\n        \n            @angular/localize : ^11.0.0\n        \n            @angular/material : ^11.2.2\n        \n            @angular/platform-browser : 11.2.3\n        \n            @angular/platform-browser-dynamic : 11.2.3\n        \n            @angular/platform-server : 11.2.3\n        \n            @angular/router : 11.2.3\n        \n            @apollo/client : ^3.3.12\n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/graphql : ^7.9.10\n        \n            @nestjs/jwt : ^7.2.0\n        \n            @nestjs/passport : ^7.1.5\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/typeorm : ^7.1.5\n        \n            @ng-bootstrap/ng-bootstrap : ^9.0.2\n        \n            @ngrx/component-store : 11.0.0\n        \n            @ngrx/effects : ^11.0.1\n        \n            @ngrx/entity : ^11.0.0\n        \n            @ngrx/router-store : ^11.0.1\n        \n            @ngrx/store : ^11.0.1\n        \n            @nguniversal/express-engine : ^11.2.1\n        \n            @nrwl/angular : 11.4.0\n        \n            apollo-angular : ^2.4.0\n        \n            apollo-server-express : ^2.21.0\n        \n            bcrypt : ^5.0.1\n        \n            bootstrap : ^5.0.0-beta2\n        \n            express : ^4.15.2\n        \n            graphql : ^15.5.0\n        \n            graphql-tools : ^7.0.4\n        \n            graphql-type-json : ^0.3.2\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.5.1\n        \n            reflect-metadata : ^0.1.13\n        \n            rxjs : ~6.6.3\n        \n            tslib : ^2.0.0\n        \n            typeorm : ^0.2.31\n        \n            zen-observable-ts : ^1.0.0\n        \n            zone.js : ^0.10.2\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (apps/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/backend/api/src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n            \n                \n                    Bootstrap backend-api app\n\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n\n\n\n\n\n\n\n\nSVVS is an open source project and YouTube channel showcasing application development in the Nx mono repository.\n\nBackend-api\nIt a NestJS application providing\n\nAPI based on GraphQL technology \ninteraction database PostgeSQL\n\n\nTechnologies used\nNx\n• NestJs\n• GraphQL\n• Docker\n• PostgreSQL\nDocumentation\nbackend-api\n• frontend-client\n• frontend-admin\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) 2021 VladiRR\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NON INFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthModule -->\n\nUsersModule->AuthModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUsersModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nPasswordService\n\nPasswordService\n\nAuthModule -->\n\nPasswordService->AuthModule\n\n\n\n\n\nUserService\n\nUserService\n\nUsersModule -->\n\nUserService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Controller\n                \n            \n        \n        \n            \n                \n                    \n                    5 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CurrentUser   (apps/.../user.decorator.ts)\n                        \n                        \n                            resolverMap   (apps/.../app.resolver.ts)\n                        \n                        \n                            SignIn   (apps/.../auth.decorator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    apps/backend/api/src/app/users/decorators/user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            CurrentUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator((data: unknown, ctx: ExecutionContext) => {\n  return ctx\n})\n                        \n                    \n\n                \n                    \n                        Extract context from ExecutionContext\n\n                    \n                \n\n            \n        \n\n    apps/backend/api/src/app/app.resolver.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            resolverMap\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  Date: new GraphQLScalarType({\n    name: 'Date',\n    description: 'Date custom scalar type',\n    serialize(value: Date) {\n      return value.toISOString() // Value send to the client\n    },\n    parseValue(value: string) {\n      return new Date(value) // Value from the client\n    },\n    parseLiteral(ast) {\n      if (ast.kind === Kind.STRING) {\n        return new Date(ast.value) // ast value is always in string format\n      }\n      return null\n    },\n  }),\n  JSON: GraphQLJSON,\n}\n                        \n                    \n\n                \n                    \n                        Resolve scalar type Date & JSON\n\n                    \n                \n\n            \n        \n\n    apps/backend/api/src/app/auth/decorators/auth.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            SignIn\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator((data: unknown, ctx: ExecutionContext) => {\n  const args = ctx.getArgs()[1]\n\n  return {username: args.username, password: args.password}\n})\n                        \n                    \n\n                \n                    \n                        extracts username and password from ExecutionContext\n\n                    \n                \n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
